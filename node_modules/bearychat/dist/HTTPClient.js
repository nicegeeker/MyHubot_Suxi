'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _setInPath = require('./_setInPath');

var _setInPath2 = _interopRequireDefault(_setInPath);

var _validation = require('./_validation.json');

var _validation2 = _interopRequireDefault(_validation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResponseError = function (_Error) {
  _inherits(ResponseError, _Error);

  function ResponseError(message, response) {
    _classCallCheck(this, ResponseError);

    var _this = _possibleConstructorReturn(this, (ResponseError.__proto__ || Object.getPrototypeOf(ResponseError)).call(this, message));

    _this.response = response;
    return _this;
  }

  return ResponseError;
}(Error);

var UnexpectedCodeError = function (_Error2) {
  _inherits(UnexpectedCodeError, _Error2);

  function UnexpectedCodeError(message, code) {
    _classCallCheck(this, UnexpectedCodeError);

    var _this2 = _possibleConstructorReturn(this, (UnexpectedCodeError.__proto__ || Object.getPrototypeOf(UnexpectedCodeError)).call(this, message));

    _this2.code = code;
    return _this2;
  }

  return UnexpectedCodeError;
}(Error);

function tryParseResponse(response) {
  var shouldParseAsJson = response.headers.has('Content-Type') && response.headers.get('Content-Type').indexOf('application/json') === 0;
  var bodyPromise = shouldParseAsJson ? response.json() : response.text();
  return bodyPromise.then(function (data) {
    return {
      data: data,
      response: response
    };
  }).catch(function () {
    return {
      // throw ResponseError in case response body parse error.
      error: new ResponseError(response.statusText, response)
    };
  });
}

function callMethod(method, payload) {
  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

  return new Promise(function (resolve, reject) {
    method.call(context, payload).then(tryParseResponse).then(function (_ref) {
      var data = _ref.data,
          response = _ref.response,
          error = _ref.error;

      if (error) {
        reject(error);
      } else if (typeof data === 'string') {
        resolve(data);
      } else if (typeof data.code === 'number' && data.code !== 0) {
        reject(new UnexpectedCodeError(data.error, data.code));
      } else if (response.status < 200 || response.status >= 300) {
        reject(new ResponseError(response.statusText, response));
      } else {
        resolve(data);
      }
    });
  });
}

function getWrappedMethod(path, token) {
  // eslint-disable-next-line import/no-dynamic-require,global-require
  var method = require('.' + path);
  var settings = _validation2.default[path];
  settings = settings[Object.keys(settings)[0]];
  var needAuth = settings.authentication !== false;
  // eslint-disable-next-line func-names
  return function (payload) {
    if (needAuth) {
      payload = Object.assign({}, payload, {
        token: token
      });
    }
    return callMethod(method, payload, this);
  };
}

var HTTPClient = function HTTPClient(token) {
  var _this3 = this;

  _classCallCheck(this, HTTPClient);

  Object.keys(_validation2.default).forEach(function (path) {
    var setPath = path.replace(/^\//, '');
    (0, _setInPath2.default)(_this3, setPath, getWrappedMethod(path, token));
  });
};

exports.default = HTTPClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IVFRQQ2xpZW50LmpzIl0sIm5hbWVzIjpbIlJlc3BvbnNlRXJyb3IiLCJtZXNzYWdlIiwicmVzcG9uc2UiLCJFcnJvciIsIlVuZXhwZWN0ZWRDb2RlRXJyb3IiLCJjb2RlIiwidHJ5UGFyc2VSZXNwb25zZSIsInNob3VsZFBhcnNlQXNKc29uIiwiaGVhZGVycyIsImhhcyIsImdldCIsImluZGV4T2YiLCJib2R5UHJvbWlzZSIsImpzb24iLCJ0ZXh0IiwidGhlbiIsImRhdGEiLCJjYXRjaCIsImVycm9yIiwic3RhdHVzVGV4dCIsImNhbGxNZXRob2QiLCJtZXRob2QiLCJwYXlsb2FkIiwiY29udGV4dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbCIsInN0YXR1cyIsImdldFdyYXBwZWRNZXRob2QiLCJwYXRoIiwidG9rZW4iLCJyZXF1aXJlIiwic2V0dGluZ3MiLCJPYmplY3QiLCJrZXlzIiwibmVlZEF1dGgiLCJhdXRoZW50aWNhdGlvbiIsImFzc2lnbiIsIkhUVFBDbGllbnQiLCJmb3JFYWNoIiwic2V0UGF0aCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVNQSxhOzs7QUFDSix5QkFBWUMsT0FBWixFQUFxQkMsUUFBckIsRUFBK0I7QUFBQTs7QUFBQSw4SEFDdkJELE9BRHVCOztBQUU3QixVQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUY2QjtBQUc5Qjs7O0VBSnlCQyxLOztJQU90QkMsbUI7OztBQUNKLCtCQUFZSCxPQUFaLEVBQXFCSSxJQUFyQixFQUEyQjtBQUFBOztBQUFBLDJJQUNuQkosT0FEbUI7O0FBRXpCLFdBQUtJLElBQUwsR0FBWUEsSUFBWjtBQUZ5QjtBQUcxQjs7O0VBSitCRixLOztBQU9sQyxTQUFTRyxnQkFBVCxDQUEwQkosUUFBMUIsRUFBb0M7QUFDbEMsTUFBTUssb0JBQW9CTCxTQUFTTSxPQUFULENBQWlCQyxHQUFqQixDQUFxQixjQUFyQixL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LFUiLCJmaWxlIjoiSFRUUENsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXRJblBhdGggZnJvbSAnLi9fc2V0SW5QYXRoJztcbmltcG9ydCB2YWxpZGF0aW9uIGZyb20gJy4vX3ZhbGlkYXRpb24uanNvbic7XG5cbmNsYXNzIFJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHJlc3BvbnNlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICB9XG59XG5cbmNsYXNzIFVuZXhwZWN0ZWRDb2RlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNvZGUpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgY29uc3Qgc2hvdWxkUGFyc2VBc0pzb24gPSByZXNwb25zZS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykgJiZcbiAgICByZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID09PSAwO1xuICBjb25zdCBib2R5UHJvbWlzZSA9IHNob3VsZFBhcnNlQXNKc29uID8gcmVzcG9uc2UuanNvbigpIDogcmVzcG9uc2UudGV4dCgpO1xuICByZXR1cm4gYm9keVByb21pc2VcbiAgICAudGhlbihkYXRhID0+ICh7XG4gICAgICBkYXRhLFxuICAgICAgcmVzcG9uc2UsXG4gICAgfSkpXG4gICAgLmNhdGNoKCgpID0+ICh7XG4gICAgICAvLyB0aHJvdyBSZXNwb25zZUVycm9yIGluIGNhc2UgcmVzcG9uc2UgYm9keSBwYXJzZSBlcnJvci5cbiAgICAgIGVycm9yOiBuZXcgUmVzcG9uc2VFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0LCByZXNwb25zZSksXG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBjYWxsTWV0aG9kKG1ldGhvZCwgcGF5bG9hZCwgY29udGV4dCA9IHRoaXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBtZXRob2QuY2FsbChjb250ZXh0LCBwYXlsb2FkKVxuICAgICAgLnRoZW4odHJ5UGFyc2VSZXNwb25zZSlcbiAgICAgIC50aGVuKCh7IGRhdGEsIHJlc3BvbnNlLCBlcnJvciB9KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YS5jb2RlID09PSAnbnVtYmVyJyAmJiBkYXRhLmNvZGUgIT09IDApIHtcbiAgICAgICAgICByZWplY3QobmV3IFVuZXhwZWN0ZWRDb2RlRXJyb3IoZGF0YS5lcnJvciwgZGF0YS5jb2RlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzIDwgMjAwIHx8IHJlc3BvbnNlLnN0YXR1cyA+PSAzMDApIHtcbiAgICAgICAgICByZWplY3QobmV3IFJlc3BvbnNlRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgcmVzcG9uc2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWRNZXRob2QocGF0aCwgdG9rZW4pIHtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlLGdsb2JhbC1yZXF1aXJlXG4gIGNvbnN0IG1ldGhvZCA9IHJlcXVpcmUoYC4ke3BhdGh9YCk7XG4gIGxldCBzZXR0aW5ncyA9IHZhbGlkYXRpb25bcGF0aF07XG4gIHNldHRpbmdzID0gc2V0dGluZ3NbT2JqZWN0LmtleXMoc2V0dGluZ3MpWzBdXTtcbiAgY29uc3QgbmVlZEF1dGggPSBzZXR0aW5ncy5hdXRoZW50aWNhdGlvbiAhPT0gZmFsc2U7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICBpZiAobmVlZEF1dGgpIHtcbiAgICAgIHBheWxvYWQgPSBPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkLCB7XG4gICAgICAgIHRva2VuLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjYWxsTWV0aG9kKG1ldGhvZCwgcGF5bG9hZCwgdGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhUVFBDbGllbnQge1xuICBjb25zdHJ1Y3Rvcih0b2tlbikge1xuICAgIE9iamVjdC5rZXlzKHZhbGlkYXRpb24pLmZvckVhY2goKHBhdGgpID0+IHtcbiAgICAgIGNvbnN0IHNldFBhdGggPSBwYXRoLnJlcGxhY2UoL15cXC8vLCAnJyk7XG4gICAgICBzZXRJblBhdGgodGhpcywgc2V0UGF0aCwgZ2V0V3JhcHBlZE1ldGhvZChwYXRoLCB0b2tlbikpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=