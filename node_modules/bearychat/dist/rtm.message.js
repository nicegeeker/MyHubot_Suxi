'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var type = {
  UNKNOWN: 'unknown',
  PING: 'ping',
  PONG: 'pong',
  REPLY: 'reply',
  OK: 'ok',
  P2P_MESSAGE: 'message',
  P2P_TYPING: 'typing',
  CHANNEL_MESSAGE: 'channel_message',
  CHANNEL_TYPING: 'channel_typing',
  UPDATE_USER_CONNECTION: 'update_user_connection'
};

function isP2P(message) {
  if (!message) {
    return false;
  }

  return [type.P2P_MESSAGE, type.P2P_TYPING].indexOf(message.type) !== -1;
}

function isChatMessage(message) {
  if (!message) {
    return false;
  }

  return [type.P2P_MESSAGE, type.CHANNEL_MESSAGE].indexOf(message.type) !== -1;
}

function isFromUser(message, user) {
  if (!message || !user) {
    return false;
  }

  if (!message.uid || !user.id) {
    return false;
  }

  return message.uid === user.id;
}

function reply(message, text) {
  var replyMessage = {
    text: text,
    vchannel_id: message.vchannel_id
  };

  if (isP2P(message)) {
    replyMessage.type = type.P2P_MESSAGE;
    replyMessage.to_uid = message.uid;
  } else {
    replyMessage.type = type.CHANNEL_MESSAGE;
    replyMessage.channel_id = message.channel_id;
  }

  return replyMessage;
}

function refer(message, text) {
  var referMessage = reply(message, text);
  referMessage.refer_key = message.key;

  return referMessage;
}

exports.default = {
  type: type,

  isP2P: isP2P,
  isChatMessage: isChatMessage,
  isFromUser: isFromUser,

  reply: reply,
  refer: refer
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydG0ubWVzc2FnZS5qcyJdLCJuYW1lcyI6WyJ0eXBlIiwiVU5LTk9XTiIsIlBJTkciLCJQT05HIiwiUkVQTFkiLCJPSyIsIlAyUF9NRVNTQUdFIiwiUDJQX1RZUElORyIsIkNIQU5ORUxfTUVTU0FHRSIsIkNIQU5ORUxfVFlQSU5HIiwiVVBEQVRFX1VTRVJfQ09OTkVDVElPTiIsImlzUDJQIiwibWVzc2FnZSIsImluZGV4T2YiLCJpc0NoYXRNZXNzYWdlIiwiaXNGcm9tVXNlciIsInVzZXIiLCJ1aWQiLCJpZCIsInJlcGx5IiwidGV4dCIsInJlcGx5TWVzc2FnZSIsInZjaGFubmVsX2lkIiwidG9fdWlkIiwiY2hhbm5lbF9pZCIsInJlZmVyIiwicmVmZXJNZXNzYWdlIiwicmVmZXJfa2V5Iiwia2V5Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU1BLE9BQU87QUFDWEMsV0FBUyxTQURFO0FBRVhDLFFBQU0sTUFGSztBQUdYQyxRQUFNLE1BSEs7QUFJWEMsU0FBTyxPQUpJO0FBS1hDLE1BQUksSUFMTztBQU1YQyxlQUFhLFNBTkY7QUFPWEMsY0FBWSxRQVBEO0FBUVhDLG1CQUFpQixpQkFSTjtBQVNYQyxrQkFBZ0IsZ0JBVEw7QUFVWEMsMEJBQXdCO0FBVmIsQ0FBYjs7QUFhQSxTQUFTQyxLQUFULENBQWVDLE9BQWYsRUFBd0I7QUFDdEIsTUFBSSxDQUFDQSxPQUFMLEVBQWM7QUFDWixXQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUFPLENBQ0xaLEtBQUtNLFdBREEsRUFFTE4sS0FBS08sVUFGQSxFQUdMTSxPQUhLLENBR0dELFFBQVFaLElBSFgsTUFHcUIsQ0FBQyxDQUg3QjtBQUlEOztBQUVELFNBQVNjLGFBQVQsQ0FBdUJGLE9BQXZCLEVBQWdDO0FBQzlCLE1BQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1osV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBTyxDQUNMWixLQUFLTSxXQURBLEVBRUxOLEtBQUtRLGVBRkEsRUFHTEssT0FISyxDQUdHRCxRQUFRWixJQUhYLE1BR3FCLENBQUMsQ0FIN0I7QUFJRDs7QUFFRCxTQUFTZSxVQUFULENBQW9CSCxPQUFwQixFQUE2QkksSUFBN0IsRUFBbUM7QUFDakMsTUFBSSxDQUFDSixPQUFELElBQVksQ0FBQ0ksSUFBakIsRUFBdUI7QUFDckIsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDSixRQUFRSyxHQUFULElBQWdCLENBQUNELEtBQUtFLEVBQTFCLEVBQThCO0FBQzVCLFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU9OLFFBQVFLLEdBQVIsS0FBZ0JELEtBQUtFLEVBQTVCO0FBQ0Q7O0FBRUQsU0FBU0MsS0FBVCxDQUFlUCxPQUFmLEVBQXdCUSxJQUF4QixFQUE4QjtBQUM1QixNQUFNQyxlQUFlO0FBQ25CRCxjQURtQjtBQUVuQkUsaUJBQWFWLFFBQVFVO0FBRkYsR0FBckI7O0FBS0EsTUFBSVgsTUFBTUMsT0FBTixDQUFKLEVBQW9CO0FBQ2xCUyxpQkFBYXJCLElBQWIsR0FBb0JBLEtBQUtNLFdBQXpCO0FBQ0FlLGlCQUFhRSxNQUFiLEdBQXNCWCxRQUFRSyxHQUE5QjtBQUNELEdBSEQsTUFHTztBQUNMSSxpQkFBYXJCLElBQWIsR0FBb0JBLEtBQUtRLGVBQXpCO0FBQ0FhLGlCQUFhRyxVQUFiLEdBQTBCWixRQUFRWSxVQUFsQztBQUNEOztBQUVELFNBQU9ILFlBQVA7QUFDRDs7QUFFRCxTQUFTSSxLQUFULENBQWViLE9BQWYsRUFBd0JRLElBQXhCLEVBQThCO0FBQzVCLE1BQU1NLGVBQWVQLE1BQU1QLE9BQU4sRUFBZVEsSUFBZixDQUFyQjtBQUNBTSxlQUFhQyxTQUFiLEdBQXlCZixRQUFRZ0IsR0FBakM7O0FBRUEsU0FBT0YsWUFBUDtBQUNEOztrQkFFYztBQUNiMUIsWUFEYTs7QUFHYlcsY0FIYTtBQUliRyw4QkFKYTtBQUtiQyx3QkFMYTs7QUFPYkksY0FQYTtBQVFiTTtBQVJhLEMiLCJmaWxlIjoicnRtLm1lc3NhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0eXBlID0ge1xuICBVTktOT1dOOiAndW5rbm93bicsXG4gIFBJTkc6ICdwaW5nJyxcbiAgUE9ORzogJ3BvbmcnLFxuICBSRVBMWTogJ3JlcGx5JyxcbiAgT0s6ICdvaycsXG4gIFAyUF9NRVNTQUdFOiAnbWVzc2FnZScsXG4gIFAyUF9UWVBJTkc6ICd0eXBpbmcnLFxuICBDSEFOTkVMX01FU1NBR0U6ICdjaGFubmVsX21lc3NhZ2UnLFxuICBDSEFOTkVMX1RZUElORzogJ2NoYW5uZWxfdHlwaW5nJyxcbiAgVVBEQVRFX1VTRVJfQ09OTkVDVElPTjogJ3VwZGF0ZV91c2VyX2Nvbm5lY3Rpb24nLFxufTtcblxuZnVuY3Rpb24gaXNQMlAobWVzc2FnZSkge1xuICBpZiAoIW1lc3NhZ2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHR5cGUuUDJQX01FU1NBR0UsXG4gICAgdHlwZS5QMlBfVFlQSU5HLFxuICBdLmluZGV4T2YobWVzc2FnZS50eXBlKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGlzQ2hhdE1lc3NhZ2UobWVzc2FnZSkge1xuICBpZiAoIW1lc3NhZ2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHR5cGUuUDJQX01FU1NBR0UsXG4gICAgdHlwZS5DSEFOTkVMX01FU1NBR0UsXG4gIF0uaW5kZXhPZihtZXNzYWdlLnR5cGUpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gaXNGcm9tVXNlcihtZXNzYWdlLCB1c2VyKSB7XG4gIGlmICghbWVzc2FnZSB8fCAhdXNlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghbWVzc2FnZS51aWQgfHwgIXVzZXIuaWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gbWVzc2FnZS51aWQgPT09IHVzZXIuaWQ7XG59XG5cbmZ1bmN0aW9uIHJlcGx5KG1lc3NhZ2UsIHRleHQpIHtcbiAgY29uc3QgcmVwbHlNZXNzYWdlID0ge1xuICAgIHRleHQsXG4gICAgdmNoYW5uZWxfaWQ6IG1lc3NhZ2UudmNoYW5uZWxfaWQsXG4gIH07XG5cbiAgaWYgKGlzUDJQKG1lc3NhZ2UpKSB7XG4gICAgcmVwbHlNZXNzYWdlLnR5cGUgPSB0eXBlLlAyUF9NRVNTQUdFO1xuICAgIHJlcGx5TWVzc2FnZS50b191aWQgPSBtZXNzYWdlLnVpZDtcbiAgfSBlbHNlIHtcbiAgICByZXBseU1lc3NhZ2UudHlwZSA9IHR5cGUuQ0hBTk5FTF9NRVNTQUdFO1xuICAgIHJlcGx5TWVzc2FnZS5jaGFubmVsX2lkID0gbWVzc2FnZS5jaGFubmVsX2lkO1xuICB9XG5cbiAgcmV0dXJuIHJlcGx5TWVzc2FnZTtcbn1cblxuZnVuY3Rpb24gcmVmZXIobWVzc2FnZSwgdGV4dCkge1xuICBjb25zdCByZWZlck1lc3NhZ2UgPSByZXBseShtZXNzYWdlLCB0ZXh0KTtcbiAgcmVmZXJNZXNzYWdlLnJlZmVyX2tleSA9IG1lc3NhZ2Uua2V5O1xuXG4gIHJldHVybiByZWZlck1lc3NhZ2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdHlwZSxcblxuICBpc1AyUCxcbiAgaXNDaGF0TWVzc2FnZSxcbiAgaXNGcm9tVXNlcixcblxuICByZXBseSxcbiAgcmVmZXIsXG59O1xuIl19